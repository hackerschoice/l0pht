### Sourced as the last entry from ~/.zshrc or ~/.bashrc

### Force future 'bash -c' to also load /etc/shellrc
export BASH_ENV="/etc/shellrc"

[[ -n $BASH ]] && export SHELL="/bin/bash" # user on zsh and did `bash`
# shellcheck disable=SC1091
source "/sf/bin/funcs.sh" 2>/dev/null

alias l='ls -Alh'
alias lt='ls -Alhrt'
alias lss='ls -AlhrS'
alias xterm='xterm-dark'
alias psg='ps alxwww | grep -i -E'
alias reboot='halt'
alias shutdown='halt'
alias calc='kalker'
alias cd..='cd ..'

function dmesg {
	[[ ! -t 1 ]] && { /usr/bin/curl -s sf/dmesg/ -dnocolor=1; return; }
	/usr/bin/curl -s sf/dmesg/
}

# neovim DISABLED because vim's syntax highlighting is better. neovim
# does it by file-extension but viom does it by FILE content..this means
# diff.txt looks great in vim but b/w in neovim.
# [[ -e /usr/bin/nvim ]] && {
	# alias vi='nvim'
	# alias vim='nvim'
# }
alias vi='vim'

alias norg="gron --ungron"
alias ungron="gron --ungron"
alias carbonyl="carbonyl --no-sandbox"
alias seppuku="destruct"
alias brave="brave-browser"

# Warning for script kiddies
[[ -t 0 ]] && [[ ! -e "${HOME}/.nokiddie" ]] && {
	_nokiddie_warning()
	{
		local cmd="$1"
		local sargs="$2"
		shift 2
		local is_show
		is_show=1

		[[ -s "/config/self/wgname" ]] && { unset is_show; unset _XARGS; }
		[[ -e "${HOME}/.nokiddie" ]] && unset is_show
		[[ -n $is_show ]] && {
			echo -e >&2 "\
${CDC}${cmd}${CN} does not work well via VPN providers. The uplink VPN providers
will ${CRY}block the requests${CN} when done to rapidly.
Read how the pros do it: ${CB}${CUL}https://thc.org/segfault/faq/nokiddie${CN}"

			if [[ -t 0 ]]; then
				echo -e >&2 "${CDY}Continuing in 10 seconds. Press ENTER to continue now or CTRL-c to stop.${CN}"
				read -r -t10
			fi
		}

		if [[ -z $sargs ]]; then
			command "$cmd" "$@"  # Might not exist and fail nicely here
		else
			[[ -z $is_show ]] && {
				echo -e "Adding ${CDC}${sargs}${CN} to your command. To override type:"
				echo -e "    ${CC}command ${CDC}${cmd} $*${CN}\n"
				sleep 2 
			}
			command "$cmd" "$@"  $(echo "$sargs") # allow word splitting
		fi

	}

	command -v massdns    >/dev/null && massdns(){    _nokiddie_warning "massdns" ""                                    "$@"; }
	command -v puredns    >/dev/null && puredns(){    _nokiddie_warning "puredns" ""                                    "$@"; }
	command -v masscan    >/dev/null && masscan(){    _nokiddie_warning "masscan" ""                                    "$@"; }
	command -v shuffledns >/dev/null && shuffledns(){ _nokiddie_warning "shuffledns" ""                                 "$@"; }
	command -v nuclei     >/dev/null && nuclei(){     _nokiddie_warning "nuclei" "-rl 15 -c 4 -bs 4 -hbs 2 -headc 2"    "$@"; }
	command -v ffuf       >/dev/null && ffuf(){       _nokiddie_warning "ffuf"    ""                                    "$@"; }
	command -v naabu      >/dev/null && naabu(){      _nokiddie_warning "naabu"   ""                                    "$@"; }
	command -v zmap       >/dev/null && zmap(){       _nokiddie_warning "zmap"    ""                                    "$@"; }
}

### for 'curl -x socks5h://$(PROXY) ipinfo.io'
TOR(){ echo "${SF_TOR_IP}:9050"; }
PROXY(){
	local IFS=" "
	local fmt="$*"
	local arr
	local n
	local h
	local p
	local str
	[[ -z $fmt ]] && fmt="%h:%p"

	if [[ -f /sf/share/proxies.txt ]]; then
		IFS=$'\n' arr=($(<"/sf/share/proxies.txt"))
		n=${#arr[@]}
		RANDOM=$(date '+%N')
		[[ ! $n -gt 0 ]] && { TOR; return; }
		str="${arr[$((RANDOM % n))]}"
		h="${str%:*}"
		p="${str#*:}"
	else
		h="${SF_TOR_IP}"
		p="9050"
	fi
	# Store in global variable
	_PROXY_HOST="$h"
	_PROXY_PORT="$p"
	# format
	fmt="${fmt//\%h/$h}"
	fmt="${fmt//\%p/$p}"
	echo "$fmt"
}

docker(){
	echo -e >&2 "${CDB}[${CDY}SF${CDB}] ${CR}Docker aint working.${CN} Try ${CDC}udocker${CN} instead."
	return 255
}
docker-compose(){ docker;}

# Note: bash and zsh act differently. This is for ZSH only.
urldecode() { : "${*//+/ }"; echo -e "${_//\%/\\x}"; }

[[ -n $IS_SHOW_MOTD_XPRA ]] && [[ -f /sf/bin/funcs_motd-xpra ]] && source /sf/bin/funcs_motd-xpra

[[ -t 0 ]] && [[ -n $TERM ]] && [[ "$TERM" != dumb ]] && {
	_grccmd()
	{
		local cmd
		cmd=$1
		shift 1
		[[ ! -t 1 ]] && { command "$cmd" "$@"; return; }

		command "$cmd" "$@" | /usr/bin/python3 /usr/bin/grcat "conf.${cmd##*/}"
		[[ -n ${PIPESTATUS[0]} ]] && return ${PIPESTATUS[0]} # bash
		return ${pipestatus[1]}  # zsh
	}

	_grcset()
	{
		local c
		c=$1

		unalias "$c" 2>/dev/null

		# Execution is faster if we assign a shell function
		[[ -e "/usr/share/grc/conf.${c##*/}" ]] && {
			eval "function ${c} { _grccmd \"$c\" \"\$@\"; }"
			# ZSH only: "$c"() { _grccmd "$0" "$@"; }
			return
		}

		# Fallback to slower (calls grc which calls grcat)
		alias $c="/usr/bin/grc --colour=auto $c"
	}

	# Be gay and color it all. #OneLove
	[[ -e /usr/bin/grc ]] && {
		cmds+=(./configure df dig du env findmnt free id ifconfig)
		cmds+=(lsattr lsblk lsof lspci make mount netstat nmap ntpdate)
		cmds+=(ping ps pv ss sockstat stat sysctl traceroute traceroute6 uptime vmstat wdiff whois)
		for c in "${cmds[@]}"; do
			_grcset "$c"
		done
		unset cmds

		# Currently broken:
		# - mtr (no output) 

		# curl's -v/-I goes to STDERR and needs special treadment.
		function curl {
			{ [[ "$1" == "sf/"* ]] || [[ "$2" == "sf/"* ]]; } && { /usr/bin/curl "$@"; return; }
			[[ -t 2 ]] && {
				# HERE: stderr is a TTY. Pipe stderr through grcat
				# Add -s to not show progress meter (cURL defaults to show progress if stdout is not a TTY)
				if [[ -t 1 ]]; then
					{ /usr/bin/curl --proto-default https -s "$@" 2>&1 1>&- 1>&3 3>&- | /usr/bin/grcat conf.curl; } 3>&- 3>&1 1>&- 1>&2 | hl
				else
					{ /usr/bin/curl --proto-default https -s "$@" 2>&1 1>&- 1>&3 3>&- | /usr/bin/grcat conf.curl; } 3>&- 3>&1 1>&- 1>&2
				fi
				return
			}
			# /usr/bin/grc --colour=auto curl "$@" # Doesnt do anything (!)
			[[ ! -t 1 ]] && { /usr/bin/curl --proto-default https "$@"; return; }
			/usr/bin/curl --proto-default https -s "$@" | hl
		}

		# These need stdout buffer disabled:
		cmds+=(tcpdump)
		for c in "${cmds[@]}"; do
			alias $c="/usr/bin/stdbuf -o0 /usr/bin/grc --colour=auto $c"
		done
		unset cmds

	}
	unset -f _grcset

	[[ -e /usr/bin/lsd ]] && {
		alias ls='lsd --icon never'
	}

	[[ -e /usr/bin/bat ]] && {
		less() {
			[[ ! -t 1 ]] && { command less "$@"; return; }
			# Only if output goes to PTY
			LESS=" -R " LESSOPEN="| /usr/bin/bat --color always --style=plain %s" command less "$@"
		}

		# eg. cat -An /etc/shellrc | hl sh
		hl() {
			[[ -n $1 ]] && {
				/usr/bin/bat --color always -pp -l "$@"
				return
			}
			/usr/bin/bat --color always -pp
		}

		alias hi=hl
		alias syntax=hl

		_hicmd() {
			local cmd
			local ex
			cmd=$1
			shift 1

			# If any Opts are given then use orignal command.
			for o in "$@"; do
				[[ ${o} == "--" ]] && continue
				[[ ${o:0:1} == "-" ]] && { command "$cmd" "$@"; return; }
			done

			[[ ! -t 1 || ${#} -le 0 ]] && { command "$cmd" "$@"; return; }
			for source in "$@"; do
				[[ "$source" == "--" ]] && continue
    			case $source in
        			# *ChangeLog|*changelog)
	        		# 	command "$cmd" -- "$source" | source-highlight --failsafe -f esc --lang-def=changelog.lang --style-file=esc.style ;;
			        *Makefile|*makefile)
				        command "$cmd" -- "$source" | bat -pp -l Makefile ;;
			        *.bashrc|*.zshrc|*.profile|*.bash_profile|*rc.local|*.shellrc|*_history)
				        command "$cmd" -- "$source" | bat -pp -l bash ;;
			        *)
						ex="${source##*.}"
						[[ -z $ex || $ex == $source ]] && { command "$cmd" "$@"; return; }
						# Check if extension exists...
						bat -pp -l "$ex" </dev/null 2>/dev/null || { command "$cmd" "$@"; return; }
						command "$cmd" -- "$source" | bat -pp -l "$ex" ;;
			    esac
			done
		}
		# alias cat="/usr/bin/bat -pp"
		cat() { _hicmd cat "$@"; }
		tail() { _hicmd tail "$@"; }
		head() { _hicmd head "$@"; }
	}
}

[[ -f /usr/bin/zoxide ]] && {
	eval "$(zoxide init "$(basename "$SHELL")")"
	alias cd='z'
}

# After 'alias ls=lsd...'
lsg() {
	[[ ! -t 1 ]] && { ls -Alh | grep -i -E "$*"; return; }
	ls -Alh --color=always | grep -i -E "$*" 
}

xor() { perl -e 'while(<>){foreach $c (split //){print $c^chr('"${1:-0xfa}"');}}'; }
noansi() { sed -e 's/\x1b\[[0-9;]*m//g'; }
alias nocol=noansi

[[ -f /usr/bin/fdfind ]] && alias fd=fdfind

[[ -z $LANG ]] && export LANG=en_US.UTF-8

[[ -e /sec/THIS-DIRECTORY-IS-NOT-ENCRYPTED--DO-NOT-USE.txt ]] && { echo >&2 "WARNING: /sec is NOT encrypted. PRESS ENTER to continue..."; read -r; }

[[ -n $SF_IS_GOLD_PROMPT ]] && [[ -n $PROMPT ]] && {
	PROMPT=$'%F{%(#.blue.green)}â”Œâ”€â”€${debian_chroot:+($debian_chroot)â”€}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))â”€}(%F{%(#.yellow.blue)}%n'$prompt_symbol$'%m%b%F{%(#.blue.green)})-[%B%F{reset}%(6~.%-1~/â€¦/%4~.%5~)%b%F{%(#.blue.green)}]\n%{%Gâ””%}%{%Gâ”€%}%B%(#.%F{yellow}#.%F{blue}$)%b%F{reset} '
}

[[ -n $PROMPT ]] && {
	prompt_symbol=ã‰¿
    [ "$EUID" -eq 0 ] && prompt_symbol=ðŸ’€
	[[ -n $SF_IS_GOLD_PROMPT ]] && prompt_symbol=ðŸ’›

	if [[ -e /config/self/prompt ]]; then
		PROMPT=$'%F{%(#.blue.green)}â”Œâ”€â”€$(</config/self/prompt)${debian_chroot:+($debian_chroot)â”€}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))â”€}(%B%F{%(#.red.blue)}%n'$prompt_symbol$'%m%b%F{%(#.blue.green)})-[%B%F{reset}%(6~.%-1~/â€¦/%4~.%5~)%b%F{%(#.blue.green)}]\n%{%Gâ””%}%{%Gâ”€%}%B%(#.%F{red}#.%F{blue}$)%b%F{reset} '
	else
		PROMPT=$'%F{%(#.blue.green)}â”Œâ”€â”€${debian_chroot:+($debian_chroot)â”€}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))â”€}(%B%F{%(#.red.blue)}%n'$prompt_symbol$'%m%b%F{%(#.blue.green)})-[%B%F{reset}%(6~.%-1~/â€¦/%4~.%5~)%b%F{%(#.blue.green)}]\n%{%Gâ””%}%{%Gâ”€%}%B%(#.%F{red}#.%F{blue}$)%b%F{reset} '
	fi
	unset prompt_symbol
}

# Make the Project name visibile in the PS1 prompt
[[ -z $VIRTUAL_ENV ]] && VIRTUAL_ENV="${SF_PRJ}"


PATH="${HOME:-/sec/root}/go/bin:${HOME:-/sec/root}/.cargo/bin:/sec/root/.local/bin:/sec/usr/sbin:/sec/usr/bin:/sf/bin:/usr/local/go/bin:$PATH"
[[ -d /usr/share/doc/python3-impacket/examples ]] && PATH="${PATH}:/usr/share/doc/python3-impacket/examples"
export PATH

# when root changes to user, make X11 work
[[ $UID -ne 0 ]] && export DISPLAY=:10.0

_sf_info_non_perm()
{
	# On success show this...
	echo -e "${CDB}[${CDY}SF${CDB}] ${CR}Your changes will be lost."
	echo -e "${CDB}[${CDY}SF${CDB}] ${CB}${CUL}https://www.thc.org/segfault/faq/#lost${CN}"
}

apt()
{
	/usr/bin/apt "$@"

	# Show a warning on success on quota-error or package not found.
	# (All errors set $? to 100 and can not be distinguished)
	_sf_info_non_perm
}

apt-get()
{
	/usr/bin/apt-get "$@"

	_sf_info_non_perm
}

# Load io(), io2(), dns() and ptr() functions
[[ -f /sf/bin/funcs_ip.sh ]] && source /sf/bin/funcs_ip.sh
SHELLNAME="${SHELL##*/}"
[[ -f "${HOME}/.gf/gf-completion.${SHELLNAME}" ]] && source "${HOME}/.gf/gf-completion.${SHELLNAME}"
unset SHELLNAME


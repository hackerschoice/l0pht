#! /bin/bash -r

# This is called by SSHD inside SF-HOST docker.
# - All environments have been cleared by SSHD.
# - Redirects not allowed in restricted shells.
#
# This script can be run from the source directory for testing.
# SF_BASEDIR must point to the source directory.
#    su - sf-user
#    export SF_BASEDIR=/home/sf-user/x/segfault-0.2.2a
#    cd /segfault/host/fs-root/bin
#    SF_DEBUG=1 SF_EMU=1 SF_SEED=foobar3 ./segfaultsh
#
# Load/restore environment variables from file
# `source' is prohibited in restricted bash shell (bash -r)
# use `eval' trick to load environemnt variables into a restricted shell
# SF_DEBUG can be set by ssh-client with -o SetEnv SF_DEBUG=1 or by
# docker compose '.env' file.
SSH_SF_DEBUG="${SF_DEBUG}" # Set by SSH client
[[ -f /dev/shm/env.txt ]] && eval "$(cat /dev/shm/env.txt)"
[[ -z $SF_DEBUG ]] && SF_DEBUG="${SSH_SF_DEBUG}"
unset SSH_SF_DEBUG

CY="\e[1;33m" # yellow
CDY="\e[0;33m" # yellow
CR="\e[1;31m" # red
CB="\e[1;34m" # blue
CC="\e[1;36m" # cyan
CG="\e[1;32m" # green
CDG="\e[0;32m" # green
CDC="\e[0;36m" # cyan
CDR="\e[0;31m" # red
CN="\e[0m"    # none
CW="\e[1;37m" # white
CF="\e[2m"    # faint
CUL="\e[4m"

ERREXIT()
{
	local code
	code="$1"
	[[ -z $code ]] && code=99

	shift 1
	[[ -n $1 ]] && echo -e >&2 "${CR}ERROR:${CN} $*"

	exit "$code"
}

if [[ -z $SF_DEBUG ]]; then
	DEBUGF(){ :;}
	SF_DOCKER_LOG="none"
else
	DEBUGF(){ echo -e 1>&2 "${CY}DEBUG:${CN} $*";}
	SF_DOCKER_LOG="local"
fi

argv2esc()
{
	local s
	local x
	local str

	for x in "$@"; do
		# Esacpe ' with '"'"'
		str="${x//\'/\'\"\'\"\'}"
		s+=" '$str'"
	done

	echo "$s"
}

# The current 'restricted shell' does not allow for stdout redirection to /dev/null.
# Thus execute in unrestricted shell with 'exec_devnull' and redirect stdout to /dev/null. 
exec_devnull()
{
	local argstr
	local bin

	bin="$1"
	shift 1

	argstr="$(argv2esc "$@")"
	if [[ -z $SF_DEBUG ]]; then
		bash -c "exec \"$bin\" $argstr 2>/dev/null >/dev/null"
	else
		# DEBUGF "EXEC \"$bin\" $argstr"
		# HERE: DEBUG is enabled. Show STDOUT/STDERR
		bash -c "exec \"$bin\" $argstr"
	fi
}

exec_errnull()
{
	local argstr
	local bin

	bin="$1"
	shift 1

	argstr="$(argv2esc "$@")"
	if [[ -z $SF_DEBUG ]]; then
		bash -c "exec \"$bin\" $argstr 2>/dev/null"
	else
		# HERE: DEBUG is enabled. Show STDOUT/STDERR
		bash -c "exec \"$bin\" $argstr"
	fi
}

# Overcoming a restricted shell. Write $1 to file in $2
# tofile "foobar \$HOME \"|';id;" world.txt
tofile()
{
	local str
	# Replace ' with '"'"'
	str="${1//\'/\'\"\'\"\'}"
	# [[ -n $SF_DEBUG ]] && ls -al $(dirname $2)
	bash -c "echo '$str' >'$2' 2>/dev/null"
}

# Set $1 to $2 if $1 is not already set.
emu_set_env()
{
	eval "[[ -n \"\$$1\" ]]" && return
	echo "[+] EMULATION: Setting $1=$2"
	eval "$1"=\"${2}\"
}

init_emu_tor()
{
	local fn
	fn="${SF_CFG_GUEST_DIR}/onion_hostname-$1"

	[[ -e "$fn" ]] && return

	local str
	str="${1}-EMULATIONxxxxxalsdjfkljasdflkasdlkfjaldsfadlsgiahfgljzhfkawhrkt"
	tofile "${str:0:56}.onion" "${fn}"
}


xmkdir()
{
	[[ -d "$1" ]] && return
	mkdir -p "$1"
}

# segfaultsh started directly from the command shell (for testing & development)
# SF_BASEDIR=/home/sf-user/segfault-src
# SF_EMU_PREFIX="${SF_BASEDIR}/emu"
# mkdir "$SF_EMU_PREFIX"
# SF_DEBUG=1 SF_SEED=foobar3 ./segfaultsh
init_emu()
{
	[[ -z $SF_EMU ]] && return

	SF_EMU_DIR="${SF_BASEDIR}/emu"
	SF_SEC_DIR="${SF_BASEDIR}/emu/sec/www-root"
	SF_CONFIG_DIR="${SF_BASEDIR}/emu/config"
	SF_ETCSF_DIR="${SF_BASEDIR}/config/etc/sf"
	SF_HOST_FS_ROOT="${SF_BASEDIR}/host/fs-root"
	# SF_WWW_ROOT_DIR="${SF_EMU_DIR}/encfs-sec/www-root"


	[[ ! -d $SF_EMU_DIR ]] && mkdir "${SF_EMU_DIR}"

	[[ ! -d "${SF_SEC_DIR}" ]] && mkdir -p "${SF_SEC_DIR}"
	[[ ! -f "${SF_SEC_DIR}/.IS-ENCRYPTED" ]] && touch "${SF_SEC_DIR}/.IS-ENCRYPTED"

	emu_set_env SF_DNS "1.1.1.1"
	emu_set_env SF_FQDN "EMULATION.segfault.net"
	emu_set_env SF_TOR "10.0.0.111"
	emu_set_env SF_USER "root"
	emu_set_env SSH_CONNECTION "1.2.3.4 31337 10.0.2.15 22"
	export SSH_CONNECTION

	# Overwrite defaults to run in EMULATOR
	SF_CFG_GUEST_DIR="${SF_EMU_DIR}/config-for-guest"
	SF_GUEST_SELFDIR="${SF_EMU_DIR}/self-for-guest"
	SF_ENCFS_SEC_DIR="${SF_EMU_DIR}/encfs-sec"

	xmkdir "${SF_ENCFS_SEC_DIR}"
	xmkdir "${SF_CFG_GUEST_DIR}"
	xmkdir "${SF_ENCFS_SEC_DIR}/user-${LID}"
	xmkdir "${SF_ENCFS_SEC_DIR}/everyone-root"
	xmkdir "${SF_ENCFS_SEC_DIR}/everyone-root/everyone"
	xmkdir "${SF_ENCFS_SEC_DIR}/www-root/www/${SF_HOSTNAME,,}"

	[[ ! -f "${SF_CFG_GUEST_DIR}/id_ed25519" ]] && ssh-keygen -q -t ed25519 -C "" -N "" -f "${SF_CFG_GUEST_DIR}/id_ed25519"
	[[ -f "${SF_CFG_GUEST_DIR}/id_ed25519.pub" ]] && rm -f "${SF_CFG_GUEST_DIR}/id_ed25519.pub"

	init_emu_tor 22
	init_emu_tor 80

	exec_devnull docker network create -d bridge sf-guest
}

init_defaults()
{
	[[ -z $SF_BASEDIR ]] && ERREXIT 1 "SF_BASEDIR= not set"
	SF_SEC_DIR="/sec/www-root"
	SF_WWW_ROOT_DIR="/sec/www-root"
	SF_CONFIG_DIR="/config/host"
	SF_ETCSF_DIR="/config/host/etc/sf"
	SF_CFG_GUEST_DIR="${SF_SHMDIR}/config-for-guest" # Mounted to /config/guest
	SF_GUEST_SELFDIR="${SF_SHMDIR}/self-for-guest"    # Mounted to /config/self
	SF_ENCFS_SEC_DIR="${SF_SHMDIR}/encfs-sec"
}

init_vars()
{
	init_defaults
	init_emu

	NOW="$(date +%s)"
	YOUR_IP="${SSH_CONNECTION%%[[:space:]]*}"
	YOUR_IP="${YOUR_IP//[^0-9.:]/}"
	[[ -z $YOUR_IP ]] && ERREXIT 255 "SSH_CONNECTION= is is not set. segfaultsh not started via sshd?"
	# Do not store IP addresses. Hash it with a secret (SEED) instead.
	local str
	str="$(echo -n "IP-${YOUR_IP}-${SF_SEED}" | sha512sum)"
	YOUR_IP_HASH="${str:0:16}"
	[[ -z $YOUR_IP_HASH ]] && ERREXIT 2 "YOUR_IP_HASH= not set"

	[[ -z $SF_FQDN ]] && SF_FQDN="this"
	DB_DIR="${SF_CONFIG_DIR}/db"
	SF_USER_DB_DIR="${SF_CONFIG_DIR}/db/db-${LID}"

	# DEBUGF "SF_REDIS_AUTH=${SF_REDIS_AUTH}"
}

mk_portforward()
{
	local ipport

	ipport=$(echo -e "DEL portd:response-${LID}\"\n\
RPUSH portd:blcmd \"getport ${LID}\"\n\
BLPOP portd:response-${LID} 5" | REDISCLI_AUTH="${SF_REDIS_AUTH}" redis-cli --raw -h sf-redis) || return
	# DEBUGF "ipport='$ipport'"
	ipport="${ipport##*$'\n'}"
	[[ ! "${ipport##*:}" -gt 0 ]] && { DEBUGF "Failed to get Reverse Port Forward (ipport='$ipport')"; return; }

	# The PortD add's a /sf/run/self/reverse_forward.
	DEBUGF "Reverse Port Forward: $ipport"
}

# Called when a new server is created.
print_disclaimer()
{
	echo 1>&2 -e "\
${CR}######################################################################
#### ${CY}DISCLAIMER: TO BE USED FOR CREATIVE AND GOOD PURPOSES ONLY.. ${CR}####
#### ${CY}TO TINKER AND TO EXPLORE.     >>>USE AT YOUR OWN RISK<<<     ${CR}####
######################################################################${CN}"
}

print_ssh_access()
{
	local key_suffix
	key_suffix="sf-${SF_FQDN//./-}"
	echo 1>&2 -e "\
:Cut & Paste these lines to your workstation's shell to retain access:
######################################################################
${CDC}cat >~/.ssh/id_${key_suffix} ${CDR}<<__EOF__
${CN}${CF}$(<"/config/guest/id_ed25519")
${CDR}__EOF__
${CDC}cat >>~/.ssh/config ${CDR}<<${CDR}__EOF__
${CN}${CF}host ${SF_HOSTNAME,,}
    User root
    HostName ${SF_FQDN}
    IdentityFile ~/.ssh/id_${key_suffix}
    SetEnv SECRET=${SF_SEC}
${CDR}__EOF__
${CDC}chmod 600 ~/.ssh/config ~/.ssh/id_${key_suffix}${CN}
######################################################################
Thereafter use these commands:
--> ${CDC}ssh  ${SF_HOSTNAME,,}${CN}
--> ${CDC}sftp ${SF_HOSTNAME,,}${CN}
--> ${CDC}scp  ${SF_HOSTNAME,,}:stuff.tar.gz ~/${CN}
--> ${CDC}sshfs -o reconnect ${SF_HOSTNAME,,}:/sec ~/sec ${CN}
----------------------------------------------------------------------"
}

# Output GOODBYE message with infos how to connect back to this shell
print_goodbye()
{
	local str
	[[ -z $IS_PTY ]] && return

	# Restricted shell (-r) wont let us redirect stderr - use a bash-exec trick
	# n="$(bash -c "docker exec \"lg-${LID}\" pgrep . 2>/dev/null|wc -l")"

	n=$(IFS=$'\n' n=($(docker top "lg-${LID}" -o pid )); echo "${#n[@]}")
	[[ ! $n -gt 1 ]] && n=1
	((n--))

	DEBUGF "Processes running: $n"
	if [[ "$n" -gt 2 ]]; then
		# Display the running processes
		str="process is"
		[[ "$n" -gt 3 ]] && str="processes are"
		echo -e "${CY}WARNING: ${CR}$((n-2))${CY} ${str} still running:${CN}"
		exec_errnull docker exec "lg-${LID}" pgrep -v '^\[SF' -al | tail -n+3 | while read x; do p="${x%% *}        "; n="${x#* }"; echo -e "${CDY}--> ${CDR}${p:0:8}${CDG}${n:0:68}${CN}"; done
		echo -e "\
-------> The encrypted filesystem in /sec will remain accessible until
-------> the last shell exits or all background processes terminate.
-------> Type ${CC}halt${CN} instead to stop this server. This will
-------> also make /sec unavailabe until your next log in."
	fi
	[[ -z $SF_IS_PAYING ]] && {
		echo -e "\
\r${CDY}@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@   ${CDG}** GET MORE MEMORY, SPEED, STORAGE AND NO RESTRICTIONS **${CDY}   @@@
@@@          ${CB}${CUL}https://www.thc.org/segfault/buy-an-upgrade${CN}${CDY}          @@@
@@@           ${CDR}${CUL}https://www.thc.org/segfault/youcheapfuck${CN}${CDY}           @@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@${CN}"

	}
	echo -e "\
Access with      : ${CDC}ssh -o \"SetEnv SECRET=${SF_SEC:-UNKNOWN}\" ${SF_USER}@${SF_FQDN:-UNKNOWN}${CN}
GOODBYE          : ${CW}Join us on Telegram - https://t.me/thcorg${CN}"
}

print_to_many_servers()
{
	echo >&2 -e "\
[${CR}ERROR${CN}]
--> ${CDY}You ($YOUR_IP) have to many servers running${CN}
--> Read ${CB}${CUL}https://www.thc.org/segfault/youcheapfuck${CN}
--> Contact us on Telegram: ${CW}https://t.me/thcorg${CN}"
}

echo_pty()
{
	[[ -n $IS_PTY ]] || return
	echo "$@"
}

spawn_shell_exit()
{
	# $@ is either ("-c", "<command>") or empty
	DEBUGF "ARG(${#})=$*"

	# Update current IP:
	touch "/config/self-for-guest/lg-${LID}/THIS-DIRECTORY-IS-IN-MEMORY-ONLY"
	tofile "${YOUR_IP:?}" "/config/self-for-guest/lg-${LID}/ip"
	## DEBUG BEGIN
	# tofile "${YOUR_IP:?}" "/config/host/log/sigproxy-${LID}-${SF_HOSTNAME}.log-ip"
	# tofile "$(ls -al "/config/self-for-guest/lg-${LID}/")" "/config/host/log/sigproxy-${LID}-${SF_HOSTNAME}.log-ls"
	## DEBUG END
	[[ -n $YOUR_GEOIP ]] && tofile "${YOUR_GEOIP}" "/config/self-for-guest/lg-${LID}/geoip"
	# Request a reverse Port Forward
	[[ ! -f "/config/self-for-guest/lg-${LID}/reverse_ip" ]] && mk_portforward "${LID}"

	# export SF_LOG="/config/host/log/sigproxy-${LID}-${SF_HOSTNAME}.log"
	docker-exec-sigproxy exec "$ARG" "lg-${LID}" nice -n"${SF_USER_NICE_SCORE:?}" zsh "${PARAM[@]}"
	ret="$?" # save return value and exit this script later with same return value.
	DEBUGF "Exited with $ret"
	print_goodbye

	exit "$ret"
}

# Generate a mnemonic hostname from LID (e.g. ButterflyCat)
mk_hostname()
{
	NUM=$(echo "$LID" | md5sum)
	NUM=${NUM%% *}
	NUM=$((16#${NUM:0:15}))
	# Oops. bash max integer is (2^63)-1, so limit to 15 hex.
	# NUM=$(echo "ibase=16; $(echo "$LID" | md5sum | cut -f1 -d" " | tr 'a-z' A-Z)" | bc)
	readarray -t english <"${SF_HOST_FS_ROOT}/etc/english.txt"
	SF_HOSTNAME="UnknownUnknown"
	[[ "${#english[@]}" -lt 2048 ]] && ERREXIT 2 "english.txt bad"
	m=$((NUM % 2048))
	n=$(( (NUM / 2048) % 2048))
	SF_NUM="$((m * 2048 + n))"

	SF_HOSTNAME="${english[$m]}"
	SF_HOSTNAME+="${english[$n]}"
	unset NUM
	unset english
}

setup_fs_limit()
{
	# Return if 0 or not set
	[[ ! "${SF_USER_ROOT_FS_LIMIT//[^[:digit:]]/}" -gt 0 ]] && return 0 # True

	# Backing FS must be of type XFS
	[[ "$(docker info --format '{{json .DriverStatus}}' | jq -r '.[0][1]')" != "xfs" ]] && ERREXIT 1 "Backing FS is not XFS but SF_USER_ROOT_FS_LIMIT is set"

	DOCKER_ARGS+=("--storage-opt")
	DOCKER_ARGS+=("size=${SF_USER_ROOT_FS_LIMIT:?}")
}

load_limits()
{
	# Set the default values.
	# No default for ROOT_FS limit. Should be set in sf.conf or if not set
	# then root is mounted read-only
	#SF_USER_ROOT_FS_LIMIT=2GB
	SF_USER_MEMORY_LIMIT=256MB
	SF_USER_PIDS_LIMIT=32
	SF_USER_CPU_SHARE=8
	SF_USER_OOM_SCORE=500
	SF_USER_NICE_SCORE=10
	SF_LIMIT_SERVER_BY_IP=8
	SF_ULIMIT_NOFILE="1024:4096"
	SF_MAX_STRAIN="10" # No new shells until load goes below

	# HACK: Use eval-trick to 'source' in a restricted bash shell
	[[ -f "${SF_ETCSF_DIR}/sf.conf" ]] && eval "$(grep ^SF_ "${SF_ETCSF_DIR}/sf.conf")"

	# Then souce user specific limits
	[[ -f "${SF_USER_DB_DIR}/limits.conf" ]] && eval "$(grep ^SF_ "${SF_USER_DB_DIR}/limits.conf")"

	SF_MAX_LOAD="$(( ${NPROC:-1} * SF_MAX_STRAIN ))"
	# DEBUGF "SF_USER_MEMORY_LIMIT=${SF_USER_MEMORY_LIMIT}"
	# DEBUGF "SF_USER_PIDS_LIMIT=${SF_USER_PIDS_LIMIT}"
	# DEBUGF "SF_USER_CPU_SHARE=${SF_USER_CPU_SHARE}"
	# DEBUGF "SF_USER_OOM_SCORE=${SF_USER_OOM_SCORE}"
	# DEBUGF "SF_USER_ROOT_FS_LIMIT=${SF_USER_ROOT_FS_LIMIT:-NO LIMIT}"

	DOCKER_ARGS+=("--memory=${SF_USER_MEMORY_LIMIT}")
	# Setting memory-swap and memory to same value will disable swapping
	DOCKER_ARGS+=("--memory-swap=${SF_USER_MEMORY_LIMIT}")
	DOCKER_ARGS+=("--pids-limit=${SF_USER_PIDS_LIMIT}")
	DOCKER_ARGS+=("--cpu-shares=${SF_USER_CPU_SHARE}")
	DOCKER_ARGS+=("--oom-score-adj=${SF_USER_OOM_SCORE}")

	[[ -z $SF_USER_ROOT_FS_LIMIT ]] && DOCKER_ARGS+=("--read-only") || DOCKER_ARGS+=("-v${SF_BASEDIR}/config/etc/hosts:/etc/hosts:ro")

	# Default SHM_SIZE is 64M (if not set). Hard limit is --memory=
	[[ -n $SF_SHM_SIZE ]] && DOCKER_ARGS+=("--shm-size=$SF_SHM_SIZE")

	setup_fs_limit || ERREXIT 202 "Can't configure XFS limit"
}

# wait_for_conn_limit <ID> <ts_window>
# Allow a max of 5 new connections within <ts_window>.
# Give up after 120 seconds.
#   ID - is either "all" for system wide limit or YOUR_IP_HASH for per IP limit
wait_for_conn_limit()
{
	local ts_window
	local id
	local n
	local fn

	id="$1"
	ts_window="$2"
	fn="/dev/shm/conn-${id}.conf"
	# Do not allow more than 5 new connections in 30 seconds.
	ARR=(0 0 0 0 0)
	[[ -f "${fn}" ]] && {
		NOW="$(date +%s)"
		local ts_good
		local c
		c=0
		while :; do
			eval "$(grep ^ARR "${fn}")"

			ts_good=$((NOW - ts_window))
			[[ ${ARR[0]} -lt $ts_good ]] && break

			[[ $c -gt 60 ]] && echo -e >&2 "giving up. Try again later." && exit 255
			[[ $c -eq 0 ]] && echo -e >&2 "[${CY}SF${CN}] Waiting for resources..."
			echo -n "."
			sleep 2
			((c++))
			((NOW+=2))
		done
		[[ $c -gt 0 ]] && echo -e >&2 "[${CG}OK${CN}]"
	}
	tofile "ARR=(${ARR[*]:1:4} $NOW)" "${fn}"
}

wait_for_load()
{
	local load
	local max="$1"

	# FIXME: Stop after waiting for too long.
	# FIXME: Implement garbage collector...
	while :; do
		load=($(</proc/loadavg))
		load=${load[0]%%.*}
		[[ $load -lt "$max" ]] && break
		echo -e >&2 "[${CY}SF${CN}] Waiting for load to go down..."
		sleep 5
	done
}

wait_for_resources()
{
	# 5 Connections within 60 seconds from the same IP.
	wait_for_conn_limit "${YOUR_IP_HASH}" "60" 
	# 5 Connections within 15 seconds all in all
	wait_for_conn_limit "all" "30"

	wait_for_load "${SF_MAX_LOAD}"
}

print_tor_notice()
{
	sleep 5
    echo >&2 -e "\
[${CR}ERROR${CN}]
--> ${CDY}You ($YOUR_IP) are trying to connect from a Tor exit node${CN}
--> Tor exit node access is only available to ${CG}PREMIUM${CN} users
--> Read ${CB}${CUL}https://www.thc.org/segfault/youcheapfuck${CN}
--> Contact us on Telegram: ${CW}https://t.me/thcorg${CN}"
	sleep 5
}

# Check if login from Tor is ENABLED.
# TODO: Make this work with the IP hashes
check_tor_status()
{
        [[ -n $SF_ALLOW_SRC_TOR ]] && return
        [[ ! -f "/sf/share/tor-exit-nodes.txt" ]] && return

        exec_devnull grep -q -Fx "${YOUR_IP}" "/sf/share/tor-exit-nodes.txt" && { print_tor_notice; ERREXIT 255; }
}

# Check if max servers per IP are in use.
check_limit_server_by_ip()
{
	local fn
	local arr_new

	[[ -z $SF_LIMIT_SERVER_BY_IP ]] && return
	[[ -n $SF_IS_PAYING ]] && return

	[[ -n $IS_TRY_EXISTING ]] && {
		# SECRET= was supplied.
		# If it's running then allow to connect to existing (it's not a new server).
		exec_devnull docker container inspect "lg-${LID}" -f '{{.State.Status}}' && return
	}

	fn="/dev/shm/ip-${YOUR_IP_HASH}.conf"

	[[ -f "$fn" ]] && {
		eval "$(grep ^ARR "$fn")"

		local n
		local lid
		n=0
		for lid in "${ARR[@]}"; do
			[[ -z $lid ]] && break
			### Check if anyone of the shells is still alive
			exec_devnull docker container inspect "lg-${lid}" -f '{{.State.Status}}' || continue
			((n++))
			arr_new+=("$lid")
		done

		## Eyy, good idea to check if they are idle?
		[[ "$n" -ge "${SF_LIMIT_SERVER_BY_IP}" ]] && {
			print_to_many_servers

			ERREXIT 255
		}

		[[ "$n" -ge 1 ]] && {
			# The 3rd and more servers from same IP get less CPU share
			SF_USER_CPU_SHARE=2
			SF_USER_OOM_SCORE=1000
			SF_USER_NICE_SCORE=19
			DEBUGF "${n}. server from ${YOUR_IP}. CPU_SHARE=${SF_USER_CPU_SHARE}, OOM=${SF_USER_OOM_SCORE}."
		}
	}

	tofile "ARR=(${arr_new[*]} $LID)" "$fn"
}

# We must not request the guest's IP over the network (leakage). The best we can do is
# lookup his IP in a local database.
mk_geoip()
{
	local ip
	ip=${1}
	[[ ! -f /sf/share/GeoLite2-City.mmdb ]] && return

	[[ -z ${ip} ]] && return

	local city
	local country
	res=$(mmdbinspect --db /sf/share/GeoLite2-City.mmdb "${ip}")
	city=$(echo "$res" | jq -r '.[0].Records[0].Record.city.names.en | select(. != null)')
	country=$(echo "$res" | jq -r '.[0].Records[0].Record.country.names.en | select(. != null)')

	unset YOUR_GEOIP
	if [[ -n $city && -n $country ]]; then
		YOUR_GEOIP+="${city}/${country}"
	elif [[ -n $city || -n $country ]]; then
		YOUR_GEOIP+="${city}${country}" # Either one but not both
	fi
}

# Find out if SSHD spawns a shell or a command.
# and if SSHD insists on a TTY (ssh -t <user@host> <command>)
# - Execute `tty' in unrestricted shell (one day a clever hacker will exploit this)
if bash -c "tty >/dev/null"; then
	ARG="-it"
else
	ARG="-i"
fi

if [[ ${#} -eq 2 ]]; then
	# HERE: command via "-c" "cmd"
	PARAM=("-c" "${2}");
elif [[ ${#} -eq 0 ]]; then
	# - Set docker arguments to login-shell or profile wont get read.
	PARAM=("-il")
	# For -c "cmd" we silence output but for login shells we show
	IS_PTY=1
else
	ERREXIT 255 "BAD PARAMS: '${*}'"
fi

### ----BEGIN SANTIZE----
# SECRET and SF_DEBUG are user supplied.
# Connect to existing session
if [[ -n $SECRET ]] && [[ ${#SECRET} -eq 24 ]] && [[ ! "${SECRET}" =~  [^a-zA-Z0-9] ]]; then
	IS_TRY_EXISTING=1
	SF_SEC="${SECRET}"
else
	SF_SEC="$(head -c 1024 /dev/urandom | tr -dc '[:alpha:]' | head -c 24)"
fi

[[ -n $SF_DEBUG ]] && SF_DEBUG=1
### ----END SANITIZE----

# LID=$(echo -n "LID ${SF_SEC}" | sha512sum | base64 | tr -dc '[:alpha:]' | head -c 10)
LID=$(echo -n "LID ${SF_SEC}" | sha512sum | base64 -w0)
LID="${LID//[^[:alpha:]]}"
LID="${LID:0:10}"

[[ -z $SF_SEED ]] && ERREXIT 244 "SF_SEED= is not set."
MARKFILE="THIS-DIRECTORY-IS-NOT-ENCRYPTED--DO-NOT-USE.txt"

# Call init_vars() after LID is set
init_vars
# Load CPU/PID/OOM limits (systemwide or user specific)
load_limits
# Keep guest waiting until there are sufficient resources
wait_for_resources

# Check if the user is using a tor exit node
check_tor_status

### Check if the limit has been reached for this user
check_limit_server_by_ip

# Check if share got unmounted (e.g. EncFS died)
[[ ! -f "${SF_SEC_DIR}/.IS-ENCRYPTED" ]] && ERREXIT 243 "System not ready yet (wrong EncFS password. Please inform the admin to set correct SF_SEED)"

mk_hostname

mk_geoip "${YOUR_IP}"

HNLID_DIR="${SF_CONFIG_DIR}/db/hn"
HNLID_FILE="${HNLID_DIR}/hn2lid-${SF_HOSTNAME}"
# Execute under "root" (uid=1001) context:
[[ ! -d "${HNLID_DIR}" ]] && { mkdir -p "${HNLID_DIR}" || ERREXIT; }


if [[ -d "${SF_USER_DB_DIR}" ]]; then
	S="Your Server       : ${CDY}${SF_HOSTNAME:0:34}${CN}....................................................."
	echo_pty -en "${S:0:65}"
	touch "${HNLID_FILE}"
else
	print_disclaimer
	# #####################################################################
	# Got 54 space
	# Creating Server => 16 chars
	# Color escape codes => 11 chars
	# Hostname max = 54 - 16
	# Final echo: 54 + 11
	S="Creating Server ${CDY}${SF_HOSTNAME:0:38}${CN}..................................................."
	echo_pty -en "${S:0:65}"

	# A hostname is generated from the LID. Avoid collision when a hostname
	# has already been created for a different LID.
	[[ -e "${HNLID_FILE}" ]] && {
		lid_old=$(cat "${HNLID_FILE}")
		[[ "$lid_old" -ne "$LID" ]] && {
			DEBUGF "$SF_HOSTNAME already used by ${lid_old} (this is ${LID})."
			ERREXIT 13 "Hostname Collision. Try again.."
		}
		unset lid_old
	}
	IS_NEW_SERVER=1

	mkdir -p "${DB_DIR}/db-${LID}" || ERREXIT
	touch "${DB_DIR}/db-${LID}/created.txt" || ERREXIT
	tofile "$SF_NUM" "${DB_DIR}/db-${LID}/num"
	tofile "$SF_HOSTNAME" "${DB_DIR}/db-${LID}/hostname"
	# tofile "$SSH_CONNECTION" "${DB_DIR}/ssh_connection"
	# exec_errnull date +%s >"${DB_DIR}/db-${LID}/created.txt" || ERREXIT
	[[ -d "${HNLID_DIR}" ]] || exec_devnull mkdir "${HNLID_DIR}"
	tofile "$LID" "${HNLID_FILE}" || ERREXIT 231 "tofile: Failed to create hnlid_file"
fi

DEBUGF "LID=${LID} SF_HOSTNAME=${SF_HOSTNAME}"

# Create EncFS password
encfspass=$(echo -n "EncFS-PASS-${SF_SEED}${SF_SEC}" | sha512sum | base64 -w0)
encfspass="${encfspass//[^[:alpha:]]}"
encfspass="${encfspass:0:24}"
[[ -z $encfspass ]] && ERREXIT 241 "Failed to create session password"

# Start & Wait for EncFS
res=$(echo -e "RPUSH encfs \"${LID} ${encfspass} $$\"\n\
BLPOP \"encfs-${LID}-$$\" 10" | REDISCLI_AUTH="${SF_REDIS_AUTH}" redis-cli --raw -h sf-redis) || ERREXIT 230 "Can't reach EncFSD"
[[ -z $res || "${res##*$'\n'}" != "OK" ]] && ERREXIT 229 "Bad answer from EncFSD"
echo_pty -n "...."

# Attach to instance if already running
[[ -n $IS_TRY_EXISTING ]] && {
	DEBUGF "Attaching to existing instance lg-${LID}..."
	exec_devnull docker container inspect "lg-${LID}" -f '{{.State.Status}}' && { 
		echo_pty -e "..........[${CG}Ok${CN}]"
		spawn_shell_exit "$@"
		# NOT REACHED
	}
	echo_pty -n ".."

	DEBUGF "FAILED to attached to lg-${LID}"
	# HERE: Instance does not exists.
}

### Create ONION directory => From within encfsd (to set XFS quota)

# Starting GUEST shell
# Challenge: Keep user processes running that got spawned in the background
# even when first instance terminates. Also do not terminate instance
# when there are still shells using it ('docker exec').
# Solution: Spawn a container in the background and always use 'docker exec' to
# create a shell for the user.

# On the router-context set some iptable rules for this instance.
# SIGTERM is not delivered to PID==1.
# Use --init so that 'docker stop lg-' works immediatly: Deliver SIGTERM to
# process group. tiny-init notices the sigchld of died process and terminates
# itself.
# FIXME: Could write my own tiny-init that spawns itself, sleeps forever and
# waits for child. Would save memory.
### Start the care taker...
selfdir="/config/self-for-guest/lg-${LID}"
xmkdir "${selfdir}"
# rm -f "${selfdir}/reverse_ip" "${selfdir}/reverse_port" # NOTE: Deleted by portd.sh
exec_devnull docker run \
	--hostname "sf-${SF_HOSTNAME}" \
	"${DOCKER_ARGS[@]}" \
	--rm \
	--init \
	--workdir=/sec/root \
	--ulimit nofile="${SF_ULIMIT_NOFILE}" \
	--name "lg-${LID}" \
	--cap-drop=MKNOD \
	--net sf-guest \
	--add-host tor:172.20.0.111 \
	--dns "${SF_DNS:-BAD}" \
	--env SF_SEC="${SF_SEC}" \
	--env SF_TOR="${SF_TOR}" \
	--env SF_VER="${SF_VER}" \
	--env SF_USER="${SF_USER}" \
	--env SF_FQDN="${SF_FQDN}" \
	--env SF_DEBUG="${SF_DEBUG}" \
	--env SF_HOSTNAME="${SF_HOSTNAME}" \
	--env SF_LID="${LID}" \
	--env SF_IS_LOGINSHELL=1 \
	--env SF_IS_GOLD_PROMPT="${SF_IS_GOLD_PROMPT}" \
	--log-driver "${SF_DOCKER_LOG}" \
	--mount type=tmpfs,destination=/tmp,tmpfs-mode=1777 \
	-v "${SF_CFG_GUEST_DIR:?}/:/config/guest:ro" \
	-v "${SF_GUEST_SELFDIR:?}/lg-${LID}:/config/self:ro,slave" \
	-v "${SF_ENCFS_SEC_DIR}/user-${LID}:/sec:slave" \
	-v "${SF_ENCFS_SEC_DIR}/everyone-root/everyone:/everyone:ro,slave" \
	-v "${SF_ENCFS_SEC_DIR}/everyone-root/everyone/${SF_HOSTNAME}:/everyone/${SF_HOSTNAME}:slave" \
	-v "${SF_ENCFS_SEC_DIR}/www-root/www/${SF_HOSTNAME,,}:/onion:slave" \
	-v "${SF_BASEDIR}/config/etc/sf/WARNING---SHARED-BETWEEN-ALL-SERVERS---README.txt:/everyone/WARNING---SHARED-BETWEEN-ALL-SERVERS---README.txt:ro" \
	-d \
	"sf-guest${SF_GUEST_CONTAINER_NAME_SUFFIX}" bash -c "exec -a \"[init-${LID}-${SF_HOSTNAME}]\" sleep infinity" || ERREXIT 251 "Failed to set up guest instance..."

echo_pty -n ".."

DEBUGF "Instance started..."

# Wait for detached docker shell to enter 'runnning' state
n=0
while :; do
	str="$(exec_errnull docker container inspect "lg-${LID}" -f '{{.State.Status}}')"
	rc="$?"
	DEBUGF "rc=$rc status=$str"
	[[ "$rc" -eq 0 ]] && [[ "$str" = "running" ]] && break
	DEBUGF "#${n} Waiting for sf-guest to be ready..."
	if [[ $n -gt 0 ]]; then sleep 5; else sleep 0.1; fi
	n=$((n+1))
	[[ $n -gt 2 ]] && ERREXIT 253 "Could not create instance..."
done
echo_pty -n ".."

# Set FW rules for this instance
c_ip=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "lg-${LID}")
[[ -z $c_ip ]] && ERREXIT 249 "Could not get container's IP address."
exec_devnull docker exec sf-router bash -c "source /dev/shm/net-devs.txt || exit
iptables --new-chain 'SYN-LIMIT-${c_ip}' 2>/dev/null || exit 0
# HERE: Chain did not exist yet.
iptables -I FORWARD 1 -i \"\${DEV}\" -o \"\${DEV_GW}\" -s '${c_ip}' -p tcp --syn -j 'SYN-LIMIT-${c_ip}' &&
iptables -A 'SYN-LIMIT-${c_ip}' -m limit --limit \"1/sec\" --limit-burst 8196 -j RETURN &&
iptables -A 'SYN-LIMIT-${c_ip}' -j DROP" || ERREXIT 251 "Failed to set syn-limit..."

# Setup instance
exec_devnull docker exec "lg-${LID}" /sf/bin/sf-setup.sh || ERREXIT 252 "Failed to set up guest instance..."

echo_pty -e "......[${CG}OK${CN}]"

# Output help of how to connect elegantly
[[ -n $IS_NEW_SERVER ]] && print_ssh_access

# DEBUGF "Status: $(docker container inspect "lg-${LID}" -f '{{.State.Status}}')"
# Spawn shell
spawn_shell_exit "$@"
# NOT REACHED

